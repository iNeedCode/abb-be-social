//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Transformation_Layer.DalService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DAL", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    [System.SerializableAttribute()]
    public partial class DAL : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.ParameterDirection ParamaterDirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamaterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamaterValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamatertypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.ParameterDirection ParamaterDirection {
            get {
                return this.ParamaterDirectionField;
            }
            set {
                if ((this.ParamaterDirectionField.Equals(value) != true)) {
                    this.ParamaterDirectionField = value;
                    this.RaisePropertyChanged("ParamaterDirection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamaterName {
            get {
                return this.ParamaterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamaterNameField, value) != true)) {
                    this.ParamaterNameField = value;
                    this.RaisePropertyChanged("ParamaterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamaterValue {
            get {
                return this.ParamaterValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamaterValueField, value) != true)) {
                    this.ParamaterValueField = value;
                    this.RaisePropertyChanged("ParamaterValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Paramatertype {
            get {
                return this.ParamatertypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamatertypeField, value) != true)) {
                    this.ParamatertypeField = value;
                    this.RaisePropertyChanged("Paramatertype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Size {
            get {
                return this.SizeField;
            }
            set {
                if ((object.ReferenceEquals(this.SizeField, value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DalService.IDALService")]
    public interface IDALService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDALService/ExecuteDataSet", ReplyAction="http://tempuri.org/IDALService/ExecuteDataSetResponse")]
        System.Data.DataSet ExecuteDataSet(string commandText, Transformation_Layer.DalService.DAL[] dsparams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDALService/ExecuteDataSet", ReplyAction="http://tempuri.org/IDALService/ExecuteDataSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteDataSetAsync(string commandText, Transformation_Layer.DalService.DAL[] dsparams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDALService/ExecuteNonQuery", ReplyAction="http://tempuri.org/IDALService/ExecuteNonQueryResponse")]
        int ExecuteNonQuery(string commandText, Transformation_Layer.DalService.DAL[] nonparams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDALService/ExecuteNonQuery", ReplyAction="http://tempuri.org/IDALService/ExecuteNonQueryResponse")]
        System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(string commandText, Transformation_Layer.DalService.DAL[] nonparams);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDALServiceChannel : Transformation_Layer.DalService.IDALService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DALServiceClient : System.ServiceModel.ClientBase<Transformation_Layer.DalService.IDALService>, Transformation_Layer.DalService.IDALService {
        
        public DALServiceClient() {
        }
        
        public DALServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DALServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DALServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DALServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet ExecuteDataSet(string commandText, Transformation_Layer.DalService.DAL[] dsparams) {
            return base.Channel.ExecuteDataSet(commandText, dsparams);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteDataSetAsync(string commandText, Transformation_Layer.DalService.DAL[] dsparams) {
            return base.Channel.ExecuteDataSetAsync(commandText, dsparams);
        }
        
        public int ExecuteNonQuery(string commandText, Transformation_Layer.DalService.DAL[] nonparams) {
            return base.Channel.ExecuteNonQuery(commandText, nonparams);
        }
        
        public System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(string commandText, Transformation_Layer.DalService.DAL[] nonparams) {
            return base.Channel.ExecuteNonQueryAsync(commandText, nonparams);
        }
    }
}
