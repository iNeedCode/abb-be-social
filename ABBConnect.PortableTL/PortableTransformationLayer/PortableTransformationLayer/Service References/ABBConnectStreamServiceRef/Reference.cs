//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PortableTransformationLayer.ABBConnectStreamServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ABBConnectStreamServiceRef.IABBConnectStreamWCF")]
    public interface IABBConnectStreamWCF {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IABBConnectStreamWCF/saveImage", ReplyAction="http://tempuri.org/IABBConnectStreamWCF/saveImageResponse")]
        System.IAsyncResult BeginsaveImage(byte[] stream, System.AsyncCallback callback, object asyncState);
        
        void EndsaveImage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IABBConnectStreamWCFChannel : PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ABBConnectStreamWCFClient : System.ServiceModel.ClientBase<PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF>, PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF {
        
        private BeginOperationDelegate onBeginsaveImageDelegate;
        
        private EndOperationDelegate onEndsaveImageDelegate;
        
        private System.Threading.SendOrPostCallback onsaveImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ABBConnectStreamWCFClient(EndpointConfiguration endpointConfiguration) : 
                base(ABBConnectStreamWCFClient.GetBindingForEndpoint(endpointConfiguration), ABBConnectStreamWCFClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public ABBConnectStreamWCFClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ABBConnectStreamWCFClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public ABBConnectStreamWCFClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ABBConnectStreamWCFClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public ABBConnectStreamWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> saveImageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF.BeginsaveImage(byte[] stream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveImage(stream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF.EndsaveImage(System.IAsyncResult result) {
            base.Channel.EndsaveImage(result);
        }
        
        private System.IAsyncResult OnBeginsaveImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] stream = ((byte[])(inValues[0]));
            return ((PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF)(this)).BeginsaveImage(stream, callback, asyncState);
        }
        
        private object[] OnEndsaveImage(System.IAsyncResult result) {
            ((PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF)(this)).EndsaveImage(result);
            return null;
        }
        
        private void OnsaveImageCompleted(object state) {
            if ((this.saveImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveImageAsync(byte[] stream) {
            this.saveImageAsync(stream, null);
        }
        
        public void saveImageAsync(byte[] stream, object userState) {
            if ((this.onBeginsaveImageDelegate == null)) {
                this.onBeginsaveImageDelegate = new BeginOperationDelegate(this.OnBeginsaveImage);
            }
            if ((this.onEndsaveImageDelegate == null)) {
                this.onEndsaveImageDelegate = new EndOperationDelegate(this.OnEndsaveImage);
            }
            if ((this.onsaveImageCompletedDelegate == null)) {
                this.onsaveImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveImageCompleted);
            }
            base.InvokeAsync(this.onBeginsaveImageDelegate, new object[] {
                        stream}, this.onEndsaveImageDelegate, this.onsaveImageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF CreateChannel() {
            return new ABBConnectStreamWCFClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private class ABBConnectStreamWCFClientChannel : ChannelBase<PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF>, PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF {
            
            public ABBConnectStreamWCFClientChannel(System.ServiceModel.ClientBase<PortableTransformationLayer.ABBConnectStreamServiceRef.IABBConnectStreamWCF> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginsaveImage(byte[] stream, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = stream;
                System.IAsyncResult _result = base.BeginInvoke("saveImage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndsaveImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("saveImage", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
        }
    }
}
